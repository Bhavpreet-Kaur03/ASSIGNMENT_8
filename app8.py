# -*- coding: utf-8 -*-
"""APP8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k0bge0-c8HoWdbPASPIRla3CeTX4m59F
"""

import streamlit as st
import pandas as pd
import numpy as np
from assignment8_celebal import OptimizedLoanPipeline
import os
import time

# Page config MUST come first
st.set_page_config(
    page_title="üè¶ Loan Eligibility + AI Chatbot",
    layout="wide",
    initial_sidebar_state="collapsed"
)

def set_background():
    st.markdown("""
        <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

        .stApp {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            font-family: 'Inter', sans-serif;
        }

        .main-header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            padding: 2rem 3rem;
            border-radius: 25px;
            margin: 2rem 0;
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
            border: 1px solid rgba(255,255,255,0.3);
            text-align: center;
        }

        .main-header h1 {
            background: linear-gradient(135deg, #ff6b6b, #4ecdc4, #45b7d1);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-weight: 700;
            font-size: 3rem;
            margin-bottom: 0.5rem;
            text-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .main-header .subtitle {
            color: #555;
            font-size: 1.3rem;
            font-weight: 400;
            margin-top: 1rem;
        }

        .card-container {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(15px);
            padding: 2.5rem;
            border-radius: 20px;
            box-shadow: 0 25px 50px rgba(0,0,0,0.1);
            margin: 1.5rem 0;
            border: 1px solid rgba(255,255,255,0.4);
            transition: all 0.3s ease;
        }

        .card-container:hover {
            transform: translateY(-5px);
            box-shadow: 0 30px 60px rgba(0,0,0,0.15);
        }

        .status-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin: 2rem 0;
        }

        .status-card {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 1.5rem;
            border-radius: 15px;
            text-align: center;
            font-weight: 600;
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
            transition: all 0.3s ease;
        }

        .status-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 35px rgba(102, 126, 234, 0.4);
        }

        .status-card.success {
            background: linear-gradient(135deg, #11998e, #38ef7d);
            box-shadow: 0 10px 25px rgba(17, 153, 142, 0.3);
        }

        .status-card.warning {
            background: linear-gradient(135deg, #f093fb, #f5576c);
            box-shadow: 0 10px 25px rgba(240, 147, 251, 0.3);
        }

        .form-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin: 2rem 0;
        }

        .form-section {
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            padding: 2rem;
            border-radius: 20px;
            border: 2px solid rgba(102, 126, 234, 0.1);
            box-shadow: 0 10px 25px rgba(0,0,0,0.05);
        }

        .form-section h3 {
            color: #333;
            font-weight: 600;
            margin-bottom: 1.5rem;
            font-size: 1.4rem;
            border-bottom: 3px solid #667eea;
            padding-bottom: 0.5rem;
        }

        .prediction-card {
            background: linear-gradient(135deg, #56ab2f, #a8e6cf);
            color: white;
            padding: 2.5rem;
            border-radius: 20px;
            text-align: center;
            font-size: 1.4rem;
            font-weight: 700;
            margin: 2rem 0;
            box-shadow: 0 15px 35px rgba(86, 171, 47, 0.4);
            border: 3px solid rgba(255,255,255,0.3);
        }

        .prediction-card.rejected {
            background: linear-gradient(135deg, #ff416c, #ff4b2b);
            box-shadow: 0 15px 35px rgba(255, 65, 108, 0.4);
        }

        .ai-response {
            background: linear-gradient(135deg, #2c3e50, #3498db);
            color: white;
            padding: 2.5rem;
            border-radius: 20px;
            margin: 2rem 0;
            font-size: 1.1rem;
            line-height: 1.8;
            box-shadow: 0 15px 35px rgba(44, 62, 80, 0.3);
            border-left: 5px solid #3498db;
        }

        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin: 2rem 0;
        }

        .metric-card-new {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 2rem;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
        }

        .metric-card-new h4 {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .metric-card-new p {
            font-size: 1rem;
            opacity: 0.9;
        }

        .stButton button {
            background: linear-gradient(135deg, #ff6b6b, #4ecdc4);
            color: white;
            font-weight: 600;
            border: none;
            border-radius: 15px;
            padding: 1rem 2.5rem;
            font-size: 1.1rem;
            transition: all 0.3s ease;
            width: 100%;
            box-shadow: 0 8px 20px rgba(255, 107, 107, 0.3);
        }

        .stButton button:hover {
            transform: translateY(-3px);
            box-shadow: 0 12px 30px rgba(255, 107, 107, 0.4);
            background: linear-gradient(135deg, #4ecdc4, #ff6b6b);
        }

        .stTabs [data-baseweb="tab-list"] {
            gap: 15px;
            justify-content: center;
            margin-bottom: 2rem;
            background: rgba(255,255,255,0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 1rem;
        }

        .stTabs [data-baseweb="tab"] {
            background: linear-gradient(135deg, rgba(255,255,255,0.2), rgba(255,255,255,0.1));
            border-radius: 12px;
            padding: 15px 25px;
            font-weight: 600;
            color: white;
            border: 1px solid rgba(255,255,255,0.2);
            transition: all 0.3s ease;
        }

        .stTabs [data-baseweb="tab"]:hover {
            background: linear-gradient(135deg, rgba(255,255,255,0.3), rgba(255,255,255,0.2));
            transform: translateY(-2px);
        }

        .info-alert {
            background: linear-gradient(135deg, #17a2b8, #138496);
            color: white;
            padding: 1.5rem;
            border-radius: 15px;
            margin: 1.5rem 0;
            font-size: 1rem;
            box-shadow: 0 8px 20px rgba(23, 162, 184, 0.3);
            border-left: 5px solid rgba(255,255,255,0.5);
        }

        .warning-alert {
            background: linear-gradient(135deg, #ffc107, #e0a800);
            color: #212529;
            padding: 1.5rem;
            border-radius: 15px;
            margin: 1.5rem 0;
            font-size: 1rem;
            box-shadow: 0 8px 20px rgba(255, 193, 7, 0.3);
            border-left: 5px solid rgba(33, 37, 41, 0.3);
        }

        .footer-section {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(15px);
            padding: 3rem;
            border-radius: 25px;
            text-align: center;
            margin: 3rem 0 2rem 0;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            border: 1px solid rgba(255,255,255,0.3);
        }

        .footer-section h3 {
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-weight: 700;
            margin-bottom: 1rem;
        }

        .sample-questions {
            background: rgba(102, 126, 234, 0.1);
            padding: 2rem;
            border-radius: 15px;
            margin: 1.5rem 0;
            border: 2px solid rgba(102, 126, 234, 0.2);
        }

        .sample-questions h4 {
            color: #667eea;
            font-weight: 600;
            margin-bottom: 1rem;
        }

        .file-info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            margin: 2rem 0;
        }

        .file-info-card {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 2rem;
            border-radius: 15px;
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
        }

        .optimization-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin: 2rem 0;
        }
        </style>
    """, unsafe_allow_html=True)

def check_file_sizes():
    """Check and display file sizes"""
    file_info = {}

    files_to_check = [
        ('loan_model.pkl', 'ML Model'),
        ('rag_cache.pkl', 'Old RAG Cache'),
        ('rag_cache_compressed.gz', 'Compressed RAG Cache'),
        ('Training Dataset.csv', 'Training Data'),
        ('Test Dataset.csv', 'Test Data')
    ]

    for filename, description in files_to_check:
        if os.path.exists(filename):
            size_mb = os.path.getsize(filename) / (1024 * 1024)
            file_info[description] = {
                'size': size_mb,
                'exists': True,
                'filename': filename
            }
        else:
            file_info[description] = {
                'size': 0,
                'exists': False,
                'filename': filename
            }

    return file_info

# Initialize session state for caching
@st.cache_resource
def load_pipeline():
    """Load and cache the pipeline with compressed RAG support"""

    file_info = check_file_sizes()

    # Display loading info
    info_placeholder = st.empty()

    with info_placeholder.container():
        st.markdown("""
        <div class="info-alert">
            üöÄ <strong>Loading AI Models...</strong><br>
            Using optimized compressed storage for faster GitHub deployment
        </div>
        """, unsafe_allow_html=True)

    with st.spinner("ü§ñ Initializing AI system..."):
        pipeline = OptimizedLoanPipeline()

        # Check if model exists
        if os.path.exists('loan_model.pkl'):
            st.info("üìÇ Loading ML model from saved file...")
            pipeline.load_model('loan_model.pkl')

            # Load training data for RAG
            X_train, y_train, df_raw = pipeline.load_and_preprocess_train()

            # Try to load compressed RAG cache first, then fallback to regular
            if os.path.exists('rag_cache_compressed.gz'):
                st.info("üì¶ Loading compressed RAG cache (optimized for GitHub)...")
                pipeline.prepare_rag_optimized(df_raw, cache_file='rag_cache_compressed.gz')
                cache_type = "Compressed"
            elif os.path.exists('rag_cache.pkl'):
                st.info("üìÇ Loading regular RAG cache...")
                pipeline.prepare_rag_optimized(df_raw, cache_file='rag_cache.pkl')
                cache_type = "Regular"
            else:
                st.info("üîÑ Building new compressed RAG cache...")
                pipeline.prepare_rag_optimized(df_raw, cache_file='rag_cache_compressed.gz')
                cache_type = "New Compressed"

        else:
            st.info("üîÑ Training new model... This will take a few minutes.")

            # Train new model
            X_train, y_train, df_raw = pipeline.load_and_preprocess_train()
            X_test, loan_ids = pipeline.load_and_preprocess_test()

            # Train and save
            pipeline.train_and_predict(X_train, y_train, X_test)

            # Create compressed RAG cache by default
            pipeline.prepare_rag_optimized(df_raw, cache_file='rag_cache_compressed.gz')
            pipeline.save_model()
            cache_type = "New Compressed"

        # Clear info and show success
        info_placeholder.empty()

        # Show file size information
        updated_file_info = check_file_sizes()

        success_msg = f"‚úÖ AI models loaded successfully! Using {cache_type} RAG cache."

        if updated_file_info['Compressed RAG Cache']['exists']:
            cache_size = updated_file_info['Compressed RAG Cache']['size']
            success_msg += f" Cache size: {cache_size:.1f}MB"

            if cache_size < 25:  # GitHub friendly size
                success_msg += " üéâ (GitHub friendly!)"

        st.success(success_msg)
        return pipeline

def predict_single_loan(pipeline, input_data):
    """Make prediction for a single loan application"""
    try:
        # Convert input to DataFrame
        input_df = pd.DataFrame([input_data])

        # Make prediction
        prediction = pipeline.model.predict(input_df)[0]
        probability = pipeline.model.predict_proba(input_df)[0]

        return {
            'prediction': int(prediction),
            'probability': float(max(probability)),
            'approval_prob': float(probability[1]) if len(probability) > 1 else 0.0
        }
    except Exception as e:
        st.error(f"‚ùå Prediction error: {str(e)}")
        return None

def display_system_info():
    """Display system and file information"""
    file_info = check_file_sizes()

    st.markdown('<div class="card-container">', unsafe_allow_html=True)
    st.markdown("### üíæ System Information")

    # File information grid
    st.markdown('<div class="file-info-grid">', unsafe_allow_html=True)

    # File Status Card
    st.markdown("""
    <div class="file-info-card">
        <h4>üìÅ File Status</h4>
    """, unsafe_allow_html=True)

    for description, info in file_info.items():
        if info['exists']:
            size_str = f"{info['size']:.1f}MB" if info['size'] > 0 else "< 0.1MB"
            status_icon = "‚úÖ" if info['size'] < 25 else "‚ö†" if info['size'] < 100 else "‚ùå"
            st.markdown(f"<p>{status_icon} {description}: {size_str}</p>", unsafe_allow_html=True)
        else:
            st.markdown(f"<p>‚ùå {description}: Not found</p>", unsafe_allow_html=True)

    st.markdown("</div>", unsafe_allow_html=True)

    # Optimization Features Card
    st.markdown("""
    <div class="file-info-card">
        <h4>üöÄ Optimization Features</h4>
        <p>‚úÖ Compressed RAG cache (.gz format)</p>
        <p>‚úÖ Smart data sampling (500 samples)</p>
        <p>‚úÖ Float16 embeddings for size reduction</p>
        <p>‚úÖ Gzip compression (level 9)</p>
        <p>‚úÖ GitHub LFS compatible</p>
        <p>‚úÖ Auto-fallback to regular cache</p>
    </div>
    """, unsafe_allow_html=True)

    st.markdown('</div>', unsafe_allow_html=True)

    # Show recommendations
    compressed_exists = file_info['Compressed RAG Cache']['exists']
    old_cache_exists = file_info['Old RAG Cache']['exists']

    if old_cache_exists and not compressed_exists:
        st.markdown("""
        <div class="warning-alert">
            ‚ö† <strong>Recommendation:</strong> You have an old RAG cache file.
            The system will automatically create a compressed version for better GitHub compatibility.
        </div>
        """, unsafe_allow_html=True)

    elif compressed_exists:
        cache_size = file_info['Compressed RAG Cache']['size']
        if cache_size > 25:
            st.markdown("""
            <div class="warning-alert">
                ‚ö† <strong>GitHub Size Warning:</strong> Your cache file is larger than 25MB.
                Consider using Git LFS or further reducing the sample size.
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div class="info-alert">
                ‚úÖ <strong>GitHub Ready:</strong> Your compressed cache is under 25MB and GitHub friendly!
            </div>
            """, unsafe_allow_html=True)

    st.markdown('</div>', unsafe_allow_html=True)

def main():
    set_background()

    # Load pipeline (cached)
    pipeline = load_pipeline()

    # Header section
    st.markdown("""
    <div class="main-header">
        <h1>üè¶ Smart Loan Predictor</h1>
        <p class="subtitle">AI-powered loan eligibility prediction with intelligent Q&A chatbot</p>
    </div>
    """, unsafe_allow_html=True)

    # Status indicators
    st.markdown('<div class="status-grid">', unsafe_allow_html=True)

    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown('<div class="status-card success">ü§ñ AI Model Ready</div>', unsafe_allow_html=True)
    with col2:
        st.markdown('<div class="status-card success">üí¨ Chatbot Online</div>', unsafe_allow_html=True)
    with col3:
        compressed_cache_exists = os.path.exists('rag_cache_compressed.gz')
        if compressed_cache_exists:
            st.markdown('<div class="status-card warning">üì¶ Compressed Cache</div>', unsafe_allow_html=True)
        else:
            st.markdown('<div class="status-card success">‚ö° Fast Predictions</div>', unsafe_allow_html=True)

    st.markdown('</div>', unsafe_allow_html=True)

    # Main tabs
    tab1, tab2, tab3, tab4 = st.tabs(["üéØ Loan Prediction", "üí¨ AI Assistant", "üìä Model Info", "‚öô System Info"])

    with tab1:
        st.markdown('<div class="card-container">', unsafe_allow_html=True)
        st.markdown("### üìù Enter Loan Application Details")

        # Form sections in grid layout
        st.markdown('<div class="form-grid">', unsafe_allow_html=True)

        # Personal Information Section
        st.markdown("""
        <div class="form-section">
            <h3>üë§ Personal Information</h3>
        </div>
        """, unsafe_allow_html=True)

        col1, col2 = st.columns(2)
        with col1:
            gender = st.selectbox("Gender", ["Male", "Female"], key="gender")
            married = st.selectbox("Marital Status", ["No", "Yes"], key="married")
            dependents = st.selectbox("Number of Dependents", ["0", "1", "2", "3"], key="dependents")

        with col2:
            education = st.selectbox("Education Level", ["Graduate", "Not Graduate"], key="education")
            self_employed = st.selectbox("Self Employed", ["No", "Yes"], key="self_employed")
            property_area = st.selectbox("Property Area", ["Urban", "Rural", "Semiurban"], key="property")

        st.markdown('</div>', unsafe_allow_html=True)

        # Financial Information Section
        st.markdown("""
        <div class="form-section">
            <h3>üí∞ Financial Information</h3>
        </div>
        """, unsafe_allow_html=True)

        col3, col4 = st.columns(2)
        with col3:
            applicant_income = st.number_input("Applicant Income (‚Çπ)", min_value=0, value=5000, step=1000, key="app_income")
            coapplicant_income = st.number_input("Co-applicant Income (‚Çπ)", min_value=0, value=0, step=1000, key="coapp_income")

        with col4:
            loan_amount = st.number_input("Loan Amount (‚Çπ)", min_value=0, value=100000, step=10000, key="loan_amt")
            loan_term = st.number_input("Loan Term (months)", min_value=12, value=360, step=12, key="loan_term")

        credit_history = st.selectbox("Credit History", [1.0, 0.0], format_func=lambda x: "Good" if x == 1.0 else "Poor", key="credit")

        st.markdown('</div>', unsafe_allow_html=True)

        # Prediction button
        if st.button("üîÆ Predict Loan Eligibility", key="predict_btn"):
            with st.spinner("ü§î Analyzing your application..."):
                # Encode input data using pipeline's encoders
                input_data = {
                    "Gender": 0 if gender == "Male" else 1,
                    "Married": 0 if married == "No" else 1,
                    "Dependents": int(dependents),
                    "Education": 0 if education == "Graduate" else 1,
                    "Self_Employed": 0 if self_employed == "No" else 1,
                    "ApplicantIncome": applicant_income,
                    "CoapplicantIncome": coapplicant_income,
                    "LoanAmount": loan_amount,
                    "Loan_Amount_Term": loan_term,
                    "Credit_History": credit_history,
                    "Property_Area": {"Urban": 2, "Rural": 0, "Semiurban": 1}[property_area]
                }

                result = predict_single_loan(pipeline, input_data)

                if result:
                    if result['prediction'] == 1:
                        st.markdown(f"""
                        <div class="prediction-card">
                            ‚úÖ <strong>LOAN APPROVED!</strong><br>
                            Approval Confidence: {result['approval_prob']:.1%}
                        </div>
                        """, unsafe_allow_html=True)
                    else:
                        st.markdown(f"""
                        <div class="prediction-card rejected">
                            ‚ùå <strong>LOAN REJECTED</strong><br>
                            Approval Probability: {result['approval_prob']:.1%}
                        </div>
                        """, unsafe_allow_html=True)

                    # Additional insights
                    st.markdown("### üí° Quick Insights")
                    st.markdown('<div class="metrics-grid">', unsafe_allow_html=True)

                    total_income = applicant_income + coapplicant_income
                    st.markdown(f"""
                    <div class="metric-card-new">
                        <h4>‚Çπ{total_income:,}</h4>
                        <p>Total Income</p>
                    </div>
                    """, unsafe_allow_html=True)

                    if loan_amount > 0:
                        income_ratio = total_income / loan_amount * 100
                        st.markdown(f"""
                        <div class="metric-card-new">
                            <h4>{income_ratio:.1f}%</h4>
                            <p>Income to Loan Ratio</p>
                        </div>
                        """, unsafe_allow_html=True)

                    credit_status = "Excellent" if credit_history == 1.0 else "Needs Improvement"
                    st.markdown(f"""
                    <div class="metric-card-new">
                        <h4>{credit_status}</h4>
                        <p>Credit Status</p>
                    </div>
                    """, unsafe_allow_html=True)

                    st.markdown('</div>', unsafe_allow_html=True)

        st.markdown('</div>', unsafe_allow_html=True)

    with tab2:
        st.markdown('<div class="card-container">', unsafe_allow_html=True)
        st.markdown("### üí¨ Ask the AI Assistant")
        st.markdown("Ask any question about loan approvals, trends, or get personalized advice!")

        # Display RAG info
        if hasattr(pipeline, 'rag_embeddings') and pipeline.rag_embeddings is not None:
            n_samples = len(pipeline.rag_embeddings)
            st.markdown(f"""
            <div class="info-alert">
                üß† <strong>AI Knowledge Base:</strong> {n_samples} training examples available for intelligent responses
            </div>
            """, unsafe_allow_html=True)

        # Sample questions
        st.markdown("""
        <div class="sample-questions">
            <h4>üí° Try these sample questions:</h4>
        </div>
        """, unsafe_allow_html=True)

        sample_questions = [
            "What factors increase loan approval chances?",
            "Are married applicants more likely to get approved?",
            "How does education level affect loan approval?",
            "What's the average approval rate for self-employed applicants?",
            "Do urban applicants have better approval rates?"
        ]

        selected_sample = st.selectbox("Choose a sample question:", [""] + sample_questions)

        user_question = st.text_area(
            "Your Question:",
            value=selected_sample if selected_sample else "",
            placeholder="E.g., Are self-employed applicants more likely to get rejected?",
            height=100
        )

        col1, col2 = st.columns([3, 1])
        with col1:
            ask_btn = st.button("üß† Get AI Answer", key="ask_btn")
        with col2:
            if st.button("üîÑ Clear", key="clear_btn"):
                st.rerun()

        if ask_btn and user_question.strip():
            with st.spinner("ü§ñ AI is thinking..."):
                start_time = time.time()
                response = pipeline.answer_query_optimized(user_question)
                end_time = time.time()

                # Format response with line breaks
                formatted_response = response.replace('\n', '<br>')

                st.markdown(f"""
                <div class="ai-response">
                    <strong>ü§ñ AI Assistant:</strong><br><br>
                    {formatted_response}
                    <br><br>
                    <small>‚ö° Answered in {end_time - start_time:.2f} seconds</small>
                </div>
                """, unsafe_allow_html=True)

        elif ask_btn:
            st.warning("‚ö† Please enter a question to get started!")

        st.markdown('</div>', unsafe_allow_html=True)

